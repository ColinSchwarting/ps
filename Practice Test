<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    return $var1 * $var2 * $var3 * $var4
}
function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
    foreach($whatever in $arr) {
        if($whatever[0] -eq $key) {
        return $whatever[9]
        }
    
}
return -1
}
function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
    #[int]$loopy=0
    [int]$loop = 0
    do {
        [int]$loop = Read-Host
        if ( $loop -gt $loopy ) {
            $loopy = $loop
         }
    } until ( $loop -eq -1 )


    $loopy
}

<#  $num = 0 
    $high = 0
    while ($num -ne -1){
        [int]$num = read-host -prompt "Enter number:"
        if ($num -gt $high){
            $high = $num
            }
           }
           return $high 

#>


function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>
    $content = Get-Content -Path $filename
    return $content[$whichline]
    
}
function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	#>
    return Get-ChildItem -path $path | Sort-Object -Property Name
}
function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
    $sum = 0

    Foreach ($a in $input) {

    $sum += $a
    }
    $sum
}
function q7 {
	<# Return only those commands whose noun is process #>
    return Get-Command -noun process
}
function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>    
    
    Write-Output "PowerShell is $adjective"
}
function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
    $pattern = "^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$"
    if ( $addr -match $pattern )
    {
        return $true
        }
    else {
        return $false
        }
        <# OH BY THE WAY APPARENTLY THIS SHIT WORKS 
if ($addr -as [IPAddress]) {
    return $true
    }
    else {
    retrun $false
    }
    OH AND ALSO FUCK YOU:
return $addr -as [IPAddress] -as [Bool]
    #>
function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>

       return (Get-FileHash $filepath).hash -ne $lasthash

}
-------------------------------------------------------------------------------------
READ A FILE LINE BY LINE AND COUNT EACH LINE
$content = Get-Content .\random_sentences.txt
$count = 0
foreach ( $line -in $content ) {

  write-host $count -nonewline; write-host $line; $count++

}

----------------------------------------------------
READ FILE LINE BY LINE AND ONLY PRINT CERTAIN LINES
$content = Get-Content .\random_sentences.txt

foreach ( $line -in $content ) {
	if ($line.startswith("It's")) {
            $line.replace("not", "100%") #this replaces instances of "not" that are in sentences starting with "It's" with "100%"
	write-host $line
	}
	
-----------------------------------------------------------------
JOIN AN ARRAY OF STRINGS TOGETHER
$array_of_words -join  ("-") #links all the words together linked by a "-"
-------------------------------------------------------------
READS USER INPUT AND EXITS IF USER DOESN'T INPUT ANYTHING, RECORDS ALL USER INPUT THAT'S NOT EMPTY
$values = @()
Do { 
$user_input = read-host
if ($user_input.length -ne 0) {
    $values += $user_input 
} until ($user_input.length -eq 0)

($values | sort -property length -Descending)[0]
--------------------------------------------------------------------------
get-process | select * | where { ($_.name).startswith("power") }
	

















        
