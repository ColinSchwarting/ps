ACTIVITY ONE:-------------------------------------------------------------
Ensure that you have the latest copy of help by updating your help system.

>Update-Help

Which cmdlets deal with the viewing/manipulating of processes?

>Get-Process, Debug-process, start-process, stop-process, wait-process

Display a list of services installed on your local computer.

>Get-Service

What cmdlets are used to write or output objects or text to the screen?

>Write-output, write-host, write-progress

What cmdlets can be used to create, modify, list, and delete variables?

>Remove-Variable. Get-Variable, set-variable, clear-variable, new-variable, set-variable

What cmdlet can be used, other than Get-Help, to find and list other cmdlets?

>Get-Command

Find the cmdlet that is used to prompt the user for input.

>Read-Host

ACTIVITY TWO:------------------------------------------------------------
Display a list of running processes.

>Get-Process

Display a list of all running processes that start with the letter "s".

>Get-Process s*

Find the cmdlet and its purpose for the following aliases:

gal:
get-alias gal >> get-alias
dir:
gal dir >> Get-Childitem
echo:
Write-Output
?:
Where-Object
%:
ForEach-Object
ft:
Format-Table

Display a list of Windows Firewall Rules.

>>Get-NetFirewallRule

Create a new alias called "gh" for the cmdlet "Get-Help"
>> new-alias gh Get-Help

ACTIVITY THREE:------------------------------------------------------------
Create a variable called "var1" that holds a random number between 25-50.
>>$var1 = (get-random -Maximum 50 -Minimum 25) 
Create a variable called "var2" that holds a random number between 1-10.
>>$var2 = (get-random -Maximum 10 -Minimum 1) 
Create a variable called "sum" that holds the sum of var1 and var2.
$sum = $var1 + $var2
Create a variable called "sub" that holds the difference of var1 and var2.
$sub = $var1 - $var2
Create a variable called "prod" that holds the product of var1 and var2.
$prod = $var1 * $var2
Create a variable called "quo" that holds the quotient of var1 and var2.
$quo = $var1 / $var2  
Replace the variables in text with their values in the following format:

write-host "$var1" + "$var2" = "$sum"
Replace the variables in text with their values in the following format:

write-host "$var1" - "$var2" = "$sub"
Replace the variables in text with their values in the following format:

write-host "$var1" * "$var2" = "$prod"
Replace the variables in text with their values in the following format:

write-host "$var1" / "$var2" = "$quo"

ACTIVITY FOUR:----------------------------------------------------------
Create an array containing a range with a random starting and stopping point.  The starting point will be a random number from -10 through 0.
The ending point will be a random number from 1 through 20:

$array = (Get-Random -minimum -10 -maximum 1)..(Get-Random -minimum -1 -maximum 21)

Create a variable that contains the contents of the array in reverse:

[array]::Reverse($array)

ACTIVITY SIX:-------------------------------------------------------------
Display the start time of the earliest and latest running processes

>Get-Process | Where-Object{$_.StartTime} | Measure-Object -Property StartTime -Minimum -Maximum | Select-Object -Property Minimum, Maximum

Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week

get-date | select -property Dayofweek

Identify a cmdlet that displays a list of installed hotfixes.

>get-hotfix

Extend the expression to sort the list by install date, and display only the install date and hotfix ID.

>get-hotfix | Where-Object -Property InstalledOn | sort-object -Property InstalledOn | Select-Object HotFixID,InstalledOn  

Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.

>get-hotfix | Where-Object -Property InstalledOn | Select-Object HotFixID,InstalledOn,Description | sort-object -Property Description

ACTIVITY SEVEN:----------------------------------------------------------
Create a custom object that contains information about the host system using the following:

Win32_ComputerSystem
Win32_BIOS
Win32_OperatingSystem
Win32_LogicalDisk

Use the cmdlet Get-WmiObject to obtain the needed information:

$customobject = New-Object Object
Add-Member -MemberType NoteProperty -name Version -value (Get-WmiObject Win32_OperatingSystem).version -InputObject $customobject
Add-Member -MemberType NoteProperty -name OperatingSystem -value (Get-WmiObject Win32_operatingsystem).caption -InputObject $customobject
Add-Member -MemberType NoteProperty -name Manufacturer -value (Get-WmiObject Win32_BIOS).manufacturer -InputObject $customobject
Add-Member -MemberType NoteProperty -name Disks -Value (get-wmiobject Win32_LogicalDisk) -InputObject $customobject
Add-Member -MemberType NoteProperty -name ComputerName -value (Get-WmiObject Win32_ComputerSystem).name -InputObject $customobject

$customobject | format-list

ACTIVITY EIGHT:--------------------------------------------------------------
Find and extract the model number from the provided lines of text. If there isn’t a model number then display to the user that a model number wasn’t found

Check both lines for model numbers and report individually the line and model number if found.

Use the following variables for your script

EXAMPLE OF IF STATEMENT----------------------------------------------------
$line1 = "Do you have model number: MT5437 for john.doe@sharklasers.com?"
$line2 = "What model number for john.doe@sharklasers.com?"
$modelnum = '([A-Z]{2})(\d{4})'
if ( $line1 -match $modelnum )
   {
    echo $matches[0] 
}
elseif ( $line2 -match $modelnum )
    {
        echo $matches[0]
        }
else {
    echo "Model number not found"
}

EXAMPLE OF SWITCH STATEMENT-----------------------------------------------
$line1 = "Do you have model number: MT5437 for john.doe@sharklasers.com?"
$line2 = "What model number for john.doe@sharklasers.com?"
$modelnum = '([A-Z]{2})(\d{4})'
swtich($modelnum) {
{$line1 -match $_ } {
  $model = $Matches[0]
  "the model number is $model and it's on line 1" }
  { $line2 -match $_ } {
  $model = $Matches[0]
  "yes model number is $model and it's on line 2"}
  { $line1 -nomatch $_ } {
  "There is no model number in line 1" }
  { $line2 -nomatch $_ } {
  "There is no model number in line 2"
  }
  }
  
  ACTIVITY TEN:-----------------------------------------------------------
        -----------------------#get ordinal date
    function date {
    $today = Get-Date
    $Jan1 = Get-Date 1/1
    $Julian = ($today - $Jan1).days + 1

   Write-Output $Julian
    }
   
   ---------------------- #square a number
    function square($n) 
    {
        $wtf= $n * $n
        return $wtf
        }
   ------------- # get the product of three arguments 
    function Get-Product($a, $b, $c)

    {
        $ligma = $a * $b * $c
        return $ligma
        }
------------------- # get the length of hypotenuse


   function find-hypo($a, $b){
   
   $c2 = $a * $a + $b * $b
   [math]::Sqrt($c2)
   }
   
